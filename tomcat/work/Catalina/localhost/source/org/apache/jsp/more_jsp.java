/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.53
 * Generated at: 2020-03-31 16:56:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import org.apache.lucene.search.Query;
import org.opengrok.indexer.configuration.RuntimeEnvironment;
import org.opengrok.indexer.search.QueryBuilder;
import org.opengrok.indexer.search.context.Context;
import org.opengrok.indexer.logger.LoggerFactory;
import org.opengrok.indexer.util.IOUtils;
import org.opengrok.indexer.web.SearchHelper;
import org.opengrok.indexer.web.messages.MessagesContainer;
import org.opengrok.indexer.web.PageConfig;
import org.opengrok.indexer.web.Prefix;
import org.opengrok.indexer.web.Util;
import org.opengrok.indexer.web.messages.MessagesUtils;
import org.opengrok.indexer.Info;
import org.opengrok.indexer.web.PageConfig;
import org.opengrok.indexer.web.Prefix;
import org.opengrok.indexer.web.Scripts;
import org.opengrok.indexer.web.PageConfig;
import org.opengrok.indexer.configuration.Project;
import org.opengrok.indexer.web.PageConfig;
import org.opengrok.indexer.web.Prefix;
import org.opengrok.indexer.web.QueryParameters;
import org.opengrok.indexer.web.Util;
import java.util.Date;
import java.util.EnumSet;
import org.opengrok.indexer.Info;
import org.opengrok.indexer.web.PageConfig;
import org.opengrok.indexer.web.Prefix;

public final class more_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


/* ---------------------- foot.jspf members start --------------------- */
    private static EnumSet<Prefix> needAddDiv = EnumSet.of(
        Prefix.HIST_L, Prefix.XREF_P, Prefix.DIFF_P, Prefix.MORE_P,
        // could NOT find any mapping/reference to those ones:
        Prefix.HIST_S, Prefix.XREF_S, Prefix.DIFF_S, Prefix.MORE_S);
/* ---------------------- foot.jspf members end --------------------- */

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/foot.jspf", Long.valueOf(1585243402000L));
    _jspx_dependants.put("/minisearch.jspf", Long.valueOf(1585243402000L));
    _jspx_dependants.put("/httpheader.jspf", Long.valueOf(1585243402000L));
    _jspx_dependants.put("/pageheader.jspf", Long.valueOf(1585243402000L));
    _jspx_dependants.put("/mast.jsp", Long.valueOf(1585243402000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.lucene.search.Query");
    _jspx_imports_classes.add("org.opengrok.indexer.web.Scripts");
    _jspx_imports_classes.add("org.opengrok.indexer.web.SearchHelper");
    _jspx_imports_classes.add("org.opengrok.indexer.web.QueryParameters");
    _jspx_imports_classes.add("org.opengrok.indexer.search.context.Context");
    _jspx_imports_classes.add("org.opengrok.indexer.util.IOUtils");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.opengrok.indexer.search.QueryBuilder");
    _jspx_imports_classes.add("org.opengrok.indexer.configuration.Project");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("java.io.Reader");
    _jspx_imports_classes.add("org.opengrok.indexer.web.messages.MessagesUtils");
    _jspx_imports_classes.add("org.opengrok.indexer.Info");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("java.util.logging.Level");
    _jspx_imports_classes.add("org.opengrok.indexer.web.messages.MessagesContainer");
    _jspx_imports_classes.add("org.opengrok.indexer.web.Prefix");
    _jspx_imports_classes.add("org.opengrok.indexer.configuration.RuntimeEnvironment");
    _jspx_imports_classes.add("org.opengrok.indexer.logger.LoggerFactory");
    _jspx_imports_classes.add("org.opengrok.indexer.web.Util");
    _jspx_imports_classes.add("org.opengrok.indexer.web.PageConfig");
    _jspx_imports_classes.add("java.util.EnumSet");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;


{
    PageConfig cfg = PageConfig.get(request);
    cfg.checkSourceRootExistence();
}


/* ---------------------- mast.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    String redir = cfg.canProcess();
    if (redir == null || redir.length() > 0) {
        if (redir == null) {            
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
        } else {
            response.sendRedirect(redir);
        }
        return;
    }

    if (cfg.isNotModified(request, response)) {
        // the resource was not modified
        // the code 304 NOT MODIFIED has been inserted to the response
        return;
    }

    // Use UTF-8 if no encoding is specified in the request
    if (request.getCharacterEncoding() == null) {
        request.setCharacterEncoding("UTF-8");
    }

    // set the default page title
    String path = cfg.getPath();
    cfg.setTitle(cfg.getPathTitle());
}


/* ---------------------- httpheader.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    String styleDir = cfg.getCssDir();
    String ctxPath = request.getContextPath();
    String dstyle = styleDir + '/' + "style-1.0.0.min.css";
    String pstyle = styleDir + '/' + "print-1.0.0.min.css";
    String mstyle = styleDir + '/' + "mandoc-1.0.0.min.css";

      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\"\n");
      out.write("      class=\"");
      out.print( request.getServletPath().length() > 0 ? request.getServletPath().substring(1) : "" );
      out.write("\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta name=\"robots\" content=\"noindex,nofollow\" />\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n");
      out.write("<meta name=\"generator\" content=\"{OpenGrok ");
      out.print(Info.getVersion());
      out.write(' ');
      out.write('(');
      out.print(Info.getRevision());
      out.write(")\" />\n");
      out.write("<link rel=\"icon\" href=\"");
      out.print(styleDir);
      out.write("/img/icon.png\" type=\"image/png\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" media=\"all\"\n");
      out.write("    title=\"Default\" href=\"");
      out.print( dstyle );
      out.write("\" />\n");
      out.write("<link rel=\"alternate stylesheet\" type=\"text/css\" media=\"all\"\n");
      out.write("    title=\"Paper White\" href=\"");
      out.print( pstyle );
      out.write("\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print( mstyle );
      out.write("\" media=\"all\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print( pstyle );
      out.write("\" media=\"print\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery-ui-1.12.1-custom.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery-ui-1.12.1-custom.structure.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery-ui-1.12.1-custom.theme.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery.tooltip.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery.tablesorter.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/searchable-option-list-2.0.3.min.css\" />\n");
      out.write("\n");

    /**
     * The order can be arbitrary here, it is hardcoded in Scripts. These
     * are printed out in footer.
     *
     * @see Scripts
     */
    cfg.addScript("jquery");
    cfg.addScript("jquery-ui");
    cfg.addScript("jquery-tablesorter");
    cfg.addScript("tablesorter-parsers");
    cfg.addScript("searchable-option-list");
    cfg.addScript("utils");
    cfg.addScript("jquery-caret");

if (cfg.getPrefix().equals(Prefix.HIST_L)) {
    out.write("<link rel=\"alternate\" type=\"application/rss+xml\" " +
        "title=\"RSS feed for " + cfg.getPath() + "\" " +
        "href=\"" + ctxPath + Prefix.RSS_P + cfg.getPath() + "\" />");
}

      out.write("<link rel=\"search\" href=\"");
      out.print(ctxPath);
      out.write("/opensearch\"\n");
      out.write("    type=\"application/opensearchdescription+xml\"\n");
      out.write("    title=\"OpenGrok Search for current project(s)\" />\n");
      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("    window.contextPath = '");
      out.print( ctxPath );
      out.write("';\n");
      out.write("    document.xrefPath = '");
      out.print( request.getContextPath() + Prefix.XREF_P );
      out.write("';\n");
      out.write("    document.pageReady = [];\n");
      out.write("    document.domReady = [];\n");
      out.write("/* ]]> */\n");
      out.write("</script>\n");
      out.print( cfg.getEnv().getIncludeFiles().getHttpHeaderIncludeFileContent(false) );
      out.write("<title>");
      out.print(cfg.getTitle());
      out.write("</title>");

    out.write(cfg.getHeaderData());

      out.write("</head>");

}
/* ---------------------- httpheader.jsp end --------------------- */

      out.write("<body>\n");
      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("    document.rev = function() { return getParameter(\"r\"); };\n");
      out.write("    document.annotate = ");
      out.print( PageConfig.get(request).annotate() );
      out.write(";\n");
      out.write("    document.domReady.push(function() { domReadyMast(); });\n");
      out.write("    document.pageReady.push(function() { pageReadyMast(); });\n");
      out.write("/* ]]> */</script>\n");
      out.write("<div id=\"page\">\n");
      out.write("    <div id=\"whole_header\">\n");
      out.write("<div id=\"header\">");

/* ---------------------- pageheader.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);

      out.print( cfg.getEnv().getIncludeFiles().getHeaderIncludeFileContent(false) );
 
}
/* ---------------------- pageheader.jspf end --------------------- */

      out.write("</div>\n");
      out.write("<div id=\"Masthead\">\n");
      out.write("    ");

{
    PageConfig cfg = PageConfig.get(request);
    String path = cfg.getPath();
    String context = request.getContextPath();
    String rev = cfg.getRequestedRevision();

    String messages = "";
    if (cfg.getProject() != null) {
        messages = MessagesUtils.messagesToJson(cfg.getProject(),
                    MessagesContainer.MESSAGES_MAIN_PAGE_TAG);
    }
    
 if (!messages.isEmpty()) { 
      out.write("<span class=\"note-");
      out.print( MessagesUtils.getMessageLevel(cfg.getProject().getName(), MessagesContainer.MESSAGES_MAIN_PAGE_TAG) );
      out.write(" important-note\">\n");
      out.write("    ");
 } 
      out.write("<a href=\"");
      out.print( context + Prefix.XREF_P );
      out.write("/\">xref</a>: ");
      out.print( Util
        .breadcrumbPath(context + Prefix.XREF_P, path,'/',"",true,cfg.isDir()) );
 if (rev.length() != 0) { 
      out.write("\n");
      out.write("        (revision ");
      out.print( Util.htmlize(rev) );
      out.write(")\n");
      out.write("        ");
 } 
      out.write("<span id=\"dtag\">\n");
      out.write("    ");

    String dtag = cfg.getDefineTagsIndex();
    if (dtag.length() > 0) {
        
      out.write(' ');
      out.write('(');
      out.print( dtag );
      out.write(')');

    }
    
      out.write("</span>\n");
      out.write("    ");
 if (!messages.isEmpty()) { 
      out.write("</span>\n");
      out.write("    <span class=\"note-");
      out.print( MessagesUtils.getMessageLevel(cfg.getProject().getName(), MessagesContainer.MESSAGES_MAIN_PAGE_TAG) );
      out.write(" important-note important-note-rounded\"\n");
      out.write("          data-messages='");
      out.print( messages );
      out.write("'>!</span>\n");
      out.write("    ");
 }
}

      out.write("</div>\n");

    /* ---------------------- minisearch.jspf start --------------------- */
{
        PageConfig cfg = PageConfig.get(request);
        String context = request.getContextPath();

      out.write("<form action=\"");
      out.print( context + Prefix.SEARCH_P );
      out.write("\">\n");
      out.write("<div id=\"bar\">\n");
      out.write("    <ul>\n");
      out.write("        <li><a href=\"");
      out.print( context );
      out.write("/\"><span id=\"home\"></span>Home</a></li>");

    if (cfg.getEnv().isHistoryEnabled()) {
        if (!cfg.hasHistory()) {
            
      out.write("<li><span id=\"history\"></span><span class=\"c\">History</span></li>");

        } else {
            
      out.write("<li><a href=\"");
      out.print( context + Prefix.HIST_L + cfg.getUriEncodedPath()
                );
      out.write("\"><span id=\"history\"></span>History</a></li>");

        }
    }
    if (!cfg.hasAnnotations() /* || cfg.getPrefix() == Prefix.HIST_S */ ) {
        
      out.write("<li><span class=\"c\"><span class=\"annotate\"></span>Annotate</span></li>");

    } else if (cfg.annotate()) {
        
      out.write("<li><span id=\"toggle-annotate-by-javascript\" style=\"display: none\"><a\n");
      out.write("            href=\"#\" onclick=\"javascript:toggle_annotations(); return false;\"\n");
      out.write("            title=\"Show or hide line annotation (revisions, authors).\"\n");
      out.write("            ><span class=\"annotate\"></span>Annotate</a></span><span\n");
      out.write("            id=\"toggle-annotate\"><a href=\"#\"><span class=\"annotate\"></span>\n");
      out.write("            Annotate</a></span></li>");

    } else if (cfg.getPrefix() == Prefix.HIST_L) {
        
      out.write("<li>\n");
      out.write("            <a href=\"#\"\n");
      out.write("               onclick=\"javascript:\n");
      out.write("                           window.location = '");
      out.print( context + Prefix.XREF_P + cfg.getUriEncodedPath() );
      out.write("'\n");
      out.write("                           // taken from get_annotations() from utils.js\n");
      out.write("                           + '?");
      out.print( QueryParameters.ANNOTATION_PARAM_EQ_TRUE );
      out.write("'\n");
      out.write("                           + (document.rev && document.rev() ?\n");
      out.write("                                   '&amp;");
      out.print( QueryParameters.REVISION_PARAM_EQ );
      out.write("'\n");
      out.write("                           + encodeURIComponent(document.rev()) : '')\n");
      out.write("                           + (window.location.hash ?\n");
      out.write("                                   '&amp;");
      out.print( QueryParameters.WINDOW_HASH_PARAM_EQ );
      out.write("'\n");
      out.write("                           + window.location.hash.substring(1, window.location.hash.length) : '');\n");
      out.write("                           return false;\">\n");
      out.write("                <span class=\"annotate\"></span>\n");
      out.write("                Annotate\n");
      out.write("            </a>\n");
      out.write("        </li>");

    } else {
        
      out.write("<li><a href=\"#\" onclick=\"javascript:get_annotations(); return false;\"\n");
      out.write("            ><span class=\"annotate\"></span>Annotate</a></li>");

    }
    if (!cfg.isDir()) {
        if (cfg.getPrefix() == Prefix.XREF_P) {
        
      out.write("<li><a href=\"#\" onclick=\"javascript:lntoggle();return false;\"\n");
      out.write("            title=\"Show or hide line numbers (might be slower if file has more than 10 000 lines).\">\n");
      out.write("              <span id=\"line\"></span>Line#</a></li>\n");
      out.write("          <li><a href=\"#\" class=\"scopes-toggle\"\n");
      out.write("            title=\"Show or hide scopes window.\">\n");
      out.write("              <span id=\"line\">");
      out.write("</span>Scopes#</a></li>\n");
      out.write("        <li><a href=\"#\" id=\"navigate\"\n");
      out.write("            title=\"Show or hide symbol list.\">\n");
      out.write("              <span id=\"defbox\"></span>Navigate#</a></li>");

        }
        
      out.write("<li><a href=\"");
      out.print( context + Prefix.RAW_P + cfg.getUriEncodedPath() +
            (cfg.getRequestedRevision().length() == 0 ? "" : "?" +
            QueryParameters.REVISION_PARAM_EQ + Util.URIEncode(cfg.getRequestedRevision()))
            );
      out.write("\"><span id=\"raw\"></span>Raw</a></li>\n");
      out.write("\t<li><a href=\"");
      out.print( context + Prefix.DOWNLOAD_P + cfg.getUriEncodedPath() +
            (cfg.getRequestedRevision().length() == 0 ? "" : "?" +
            QueryParameters.REVISION_PARAM_EQ + Util.URIEncode(cfg.getRequestedRevision()))
            );
      out.write("\"><span id=\"download\"></span>Download</a></li>\n");
      out.write("\t");

    }
        
      out.write("<li><input type=\"text\" id=\"search\" name=\"");
      out.print( QueryParameters.FULL_SEARCH_PARAM );
      out.write("\"\n");
      out.write("                  class=\"q\" /></li>\n");
      out.write("            <li><input type=\"submit\" value=\"Search\" class=\"submit\" /></li>");

    Project proj = cfg.getProject();
    String[] vals = cfg.getSearchOnlyIn();
        
      out.write("<li><input id=\"minisearch-path\" type=\"checkbox\"\n");
      out.write("                  name=\"");
      out.print( QueryParameters.PATH_SEARCH_PARAM );
      out.write("\" value='\"");
      out.print( vals[0]
            );
      out.write('"');
      out.write('\'');
      out.write(' ');
      out.print( vals[2] );
      out.write("/> current directory</li>\n");
      out.write("    </ul>");

    if (proj != null) {
    
      out.write("<input id=\"minisearch-project\" type=\"hidden\" name=\"");
      out.print( QueryParameters.PROJECT_SEARCH_PARAM );
      out.write("\"\n");
      out.write("           value=\"");
      out.print(proj.getName());
      out.write("\" />");

    }

      out.write("<input type=\"hidden\" id=\"contextpath\" value=\"");
      out.print(request.getContextPath());
      out.write("\" />\n");
      out.write("</div>\n");
      out.write("        </form>\n");
      out.write("        <script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("            document.domReady.push(function() { domReadyMenu(true); });\n");
      out.write("            /* ]]> */\n");
      out.write("        </script>\n");
      out.write("    </div>\n");
      out.write("<div id=\"content\">\n");
 
}
/* ---------------------- minisearch.jspf end --------------------- */


/* ---------------------- mast.jsp end --------------------- */


/* ---------------------- more.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    File resourceFile = cfg.getResourceFile();
    String path = cfg.getPath();
    RuntimeEnvironment env = cfg.getEnv();
    Project activeProject = Project.getProject(resourceFile);

    QueryBuilder qbuilder = null;
    SearchHelper searchHelper = null;
    int docId = -1;
    int tabSize = 0;

    if (activeProject == null) {
        qbuilder = cfg.getQueryBuilder();
    } else {
        searchHelper = cfg.prepareInternalSearch();
        /*
         * N.b. searchHelper.destroy() is called via
         * WebappListener.requestDestroyed() on presence of the following
         * REQUEST_ATTR.
         */
        request.setAttribute(SearchHelper.REQUEST_ATTR, searchHelper);
        searchHelper.prepareExec(activeProject);
        if (searchHelper.searcher != null) {
            docId = searchHelper.searchSingle(resourceFile);
            qbuilder = searchHelper.builder;
            searchHelper.prepareSummary();
            tabSize = searchHelper.getTabSize(activeProject);
        }
    }

    try {
        Query tquery = qbuilder.build();
        if (tquery != null) {

      out.write("<p><span class=\"pagetitle\">Lines Matching <b>");
      out.print( tquery );
      out.write("</b></span></p>\n");
      out.write("<div id=\"more\" style=\"line-height:1.5em;\">\n");
      out.write("    <pre>");

            String xrefPrefix = request.getContextPath() + Prefix.XREF_P;
            boolean didPresentNew = false;
            if (docId >= 0) {
                didPresentNew = searchHelper.sourceContext.getContext2(env,
                    searchHelper.searcher, docId, out, xrefPrefix, null, false,
                    tabSize);
            }
            if (!didPresentNew) {
                /**
                 * Fall back to the old view, which re-analyzes text using
                 * PlainLinetokenizer. E.g., when source code is updated (thus
                 * affecting timestamps) but re-indexing is not yet complete.
                 */
                Context sourceContext = new Context(tquery, qbuilder);
                sourceContext.toggleAlt();
                // SRCROOT is read with UTF-8 as a default.
                try (Reader r = IOUtils.createBOMStrippedReader(
                        new FileInputStream(resourceFile),
                        StandardCharsets.UTF_8.name())) {
                    sourceContext.getContext(r, out, xrefPrefix, null, path,
                        null, false, false, null, null);
                }
            }
    
      out.write("</pre>\n");
      out.write("</div>");

        }
    } catch (Exception e) {
        LoggerFactory.getLogger(more_jsp.class).log(Level.WARNING, e.getMessage());
    }
}
/* ---------------------- more.jsp end --------------------- */


/* ---------------------- foot.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    Date dateForLastIndexRun = cfg.getEnv().getDateForLastIndexRun();
    
        
      out.write("<div id=\"footer\">\n");
      out.write("<p><a href=\"http://opengrok.github.com/OpenGrok/\"\n");
      out.write(" title=\"Served by OpenGrok (");
      out.print( Info.getVersion() );
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print( Info.getShortRevision() );
      out.write(")\"><span id=\"fti\"></span></a></p>\n");
 if(dateForLastIndexRun != null) { 
      out.write("<p>Last Index update ");
      out.print( dateForLastIndexRun );
      out.write("</p>\n");
}
      out.print( cfg.getEnv().getIncludeFiles().getFooterIncludeFileContent(false) );

    if (needAddDiv.contains(cfg.getPrefix())) {
        
      out.write("</div>");
 // #content
    }
    // #footer, #page:
    
      out.write("</div>\n");
      out.write("</div>\n");

    /**
     * Print out all collected javascript files (or inline script) by the calls
     * to {@link PageConfig#addScript} methods.
     */

      out.print( PageConfig.get(request).getScripts() );
      out.write("</body>\n");
      out.write("</html>\n");

}
/* ---------------------- foot.jspf end --------------------- */

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
